# -*- coding: utf-8 -*-
"""Titanic_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fYw5WLbB_pgT946eLmKbukCZXtsRG6s5
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.ensemble import GradientBoostingClassifier
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('titanic.csv')
data

data.info()

data.describe()

data.isna().sum()

"""**Data Pre-processing**"""

data['Age'].fillna(data['Age'].median(), inplace=True)

mode_embarked = data['Embarked'].mode()[0]
data['Embarked'].fillna(mode_embarked, inplace=True)

data.drop(['Cabin'],axis=1, inplace=True)

data.isna().sum()

"""**Data Visualizations**

**Survival rate by gender**
"""

plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Sex', hue='Survived')
plt.xlabel('Gender')
plt.ylabel('Frequency')
plt.title('Survival Rate by Gender')
plt.show()

"""**Age distribution**"""

plt.figure(figsize=(10, 6))
sns.histplot(data=data, x='Age', bins=30, kde=True)
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.title('Age Distribution')
plt.show()

"""**Survival rate by passenger class**"""

plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Pclass', hue='Survived')
plt.xlabel('Passenger Class')
plt.ylabel('Frequency')
plt.title('Survival Rate by Passenger Class')
plt.show()

"""**Survival rate**"""

plt.figure(figsize=(10, 6))
sns.countplot(data=data, x='Embarked', hue='Survived')
plt.xlabel('Embarkation Point')
plt.ylabel('Frequency')
plt.title('Survival Rate by Embarkation Point')
plt.show()

"""**Data Splitting**"""

data.columns

data.drop(['PassengerId',  'Pclass', 'Name',  'Age', 'SibSp',
       'Parch', 'Ticket'], axis = 1, inplace = True)

data

X = data.drop('Survived', axis=1)
X['Sex'] = X['Sex'].map({'male': 0, 'female': 1})
X = pd.get_dummies(X, columns=['Embarked'], drop_first=True)
y = data['Survived']

scaler = StandardScaler()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""**Machine Learning models**

**Logistic Regression**
"""

model = LogisticRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

lr_accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {lr_accuracy}")

lr_confusion_matrix = confusion_matrix(y_test, y_pred)
print(f"Confusion Matrix: {lr_confusion_matrix}")

lr_classification_report = classification_report(y_test, y_pred)
print(f"Classification Report: {lr_classification_report}")

"""**Random Forest**"""

model = RandomForestClassifier()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

rf_accuracy = accuracy_score(y_test, y_pred)

print(f"Accuracy: {rf_accuracy}")

rf_confusion_matrix = confusion_matrix(y_test, y_pred)
print(f"Confusion Matrix: {rf_confusion_matrix}")

rf_classification_report = classification_report(y_test, y_pred)
print(f"Classification Report: {rf_classification_report}")

"""**Gradient Boosting Classifier**"""

model = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=3, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

gb_accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {gb_accuracy}")

gb_confusion_matrix = confusion_matrix(y_test, y_pred)
print(f"Confusion Matrix: {confusion_matrix(y_test, y_pred)}")

gb_classification_report = classification_report(y_test, y_pred)
print(f"Classification Report: {gb_classification_report}")

print(f"Logistic Regression Accuracy: {lr_accuracy:.2f}")
print(f"Random Forest Accuracy: {rf_accuracy:.2f}")
print(f"Gradient Boosting Classifer Accuracy: {gb_accuracy:.2f}")

